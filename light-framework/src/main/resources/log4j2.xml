<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %c | %msg%n"/>
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH_ROOT" value="logs/"/>
        <property name="FILE_PATH_TEST" value="${FILE_PATH_ROOT}/test"/>
        <property name="FILE_PATH_CATALINA" value="${FILE_PATH_ROOT}/catalina"/>
        <property name="FILE_PATH_DEBUG" value="${FILE_PATH_ROOT}/debug"/>
        <property name="FILE_PATH_SQL" value="${FILE_PATH_ROOT}/sql"/>
    </Properties>

    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout
                    pattern="%highlight{%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %c | %msg%n%throwable}{FATAL=Bright red, ERROR=Bright Red, WARN=Yellow, INFO=#FFFFFF, DEBUG=Cyan, TRACE=blue}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <!--<File name="FileLog" fileName="${FILE_PATH_TEST}/test.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>-->

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="Catalina" fileName="${FILE_PATH_CATALINA}/catalina.out"
                     filePattern="${FILE_PATH_CATALINA}/catalina-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
        <!--<RollingFile name="RollingFileDebug" fileName="${FILE_PATH_DEBUG}/debug.log"
                     filePattern="${FILE_PATH_DEBUG}/debug-%d{yyyy-MM-dd}_%i.log.gz">
            &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                &lt;!&ndash;interval属性用来指定多久滚动一次，默认是1 hour&ndash;&gt;
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            &lt;!&ndash; DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖&ndash;&gt;
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>-->
        <RollingFile name="RollingFileSql" fileName="${FILE_PATH_SQL}/sql.log"
                     filePattern="${FILE_PATH_SQL}/sql-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <MarkerFilter marker="MYBATIS" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    </Appenders>


    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <Logger name="org.mybatis" level="info" additivity="false">
            <AppenderRef ref="Catalina"/>
            <AppenderRef ref="Console"/>
        </Logger>
        <!--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Catalina"/>
            <AppenderRef ref="Console"/>
        </Logger>
        <!--<Logger name="DebugLogger" level="info" additivity="false">
            <AppenderRef ref="RollingFileDebug"/>
        </Logger>-->
        <Logger name="com.light" level="debug" additivity="false">
            <AppenderRef ref="RollingFileSql"/>
            <AppenderRef ref="Catalina"/>
            <AppenderRef ref="Console"/>
        </Logger>

        <Root level="info">
            <AppenderRef ref="Console"/>
            <!--<AppenderRef ref="FileLog"/>-->
            <AppenderRef ref="Catalina"/>
        </Root>
    </Loggers>
</Configuration>